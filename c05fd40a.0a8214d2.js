(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{92:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return a})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var r=n(3),i=n(7),o=(n(0),n(99)),c={title:"What is a DID?",slug:"/concepts/dids"},a={unversionedId:"core-concepts-dids",id:"core-concepts-dids",isDocsHomePage:!1,title:"What is a DID?",description:"DIDs is a standard for globally-unique persistent decentralized identifiers specified by the W3C. The DID is a string identifier that resolves to a document which contains various pieces of metadata about the DID. The DID document usually contains public keys used for signature verification and encryption, and optionally other metadata.",source:"@site/docs/core-concepts-dids.md",slug:"/concepts/dids",permalink:"/docs/concepts/dids",editUrl:"https://github.com/ceramicstudio/js-idx/edit/master/website/docs/core-concepts-dids.md",version:"current",sidebar:"docs",previous:{title:"IDX Components",permalink:"/docs/introduction/components"},next:{title:"What is an Index?",permalink:"/docs/concepts/index"}},s=[{value:"Specification",id:"specification",children:[{value:"Identifier",id:"identifier",children:[]},{value:"DID Document",id:"did-document",children:[]}]},{value:"Supported Implementations",id:"supported-implementations",children:[{value:"3ID DID Method",id:"3id-did-method",children:[]}]}],d={rightToc:s};function p(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"DIDs is a standard for globally-unique persistent decentralized identifiers specified by the ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://www.w3.org/TR/did-core/"}),"W3C"),". The DID is a string identifier that resolves to a document which contains various pieces of metadata about the DID. The DID document usually contains public keys used for signature verification and encryption, and optionally other metadata."),Object(o.b)("p",null,"IDX uses DIDs (",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"#supported-implementations"}),"see below"),") for authentication and signing/encrypting documents. It also uses the DID document to store the ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/concepts/ceramic#docid"}),"DocID")," of the user's ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/concepts/index"}),"index"),"."),Object(o.b)("h2",{id:"specification"},"Specification"),Object(o.b)("p",null,"There are currently more than 60 implementations of DID, referred to as DID ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://www.w3.org/TR/did-core/#did-syntax"}),"methods"),"."),Object(o.b)("h3",{id:"identifier"},"Identifier"),Object(o.b)("p",null,"Each DID method follows the same basic format for a string identifier:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"did:<did-method>:<unique-string>\n")),Object(o.b)("p",null,"An example DID for the 3ID method:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"did:3:bfhriefbjhlebrlwbwebrflwebfwlebfwerbfwehbweljkrhbflewuib\n")),Object(o.b)("h3",{id:"did-document"},"DID Document"),Object(o.b)("p",null,"Every DID must resolve to a document which contains metadata about the DID."),Object(o.b)("h2",{id:"supported-implementations"},"Supported Implementations"),Object(o.b)("h3",{id:"3id-did-method"},"3ID DID Method"),Object(o.b)("p",null,"3ID is the primary DID method used in IDX. As shown above in the example, it uses the method name ",Object(o.b)("inlineCode",{parentName:"p"},"3"),". 3IDs are stored as documents on the ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/concepts/ceramic"}),"Ceramic Network"),". Notably, IDX uses the 3ID document to store the ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/concepts/ceramic#docid"}),"DocID")," of the user's ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/concepts/index"}),"index"),"."))}p.isMDXComponent=!0},99:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var r=n(0),i=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=i.a.createContext({}),p=function(e){var t=i.a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return i.a.createElement(d.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},b=i.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(n),b=r,m=u["".concat(c,".").concat(b)]||u[b]||l[b]||o;return n?i.a.createElement(m,a(a({ref:t},d),{},{components:n})):i.a.createElement(m,a({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=b;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:r,c[1]=a;for(var d=2;d<o;d++)c[d]=n[d];return i.a.createElement.apply(null,c)}return i.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);