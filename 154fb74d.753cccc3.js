(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{100:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return u}));var i=n(0),a=n.n(i);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),d=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},b=function(e){var t=d(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=d(n),m=i,u=b["".concat(c,".").concat(m)]||b[m]||p[m]||r;return n?a.a.createElement(u,o(o({ref:t},l),{},{components:n})):a.a.createElement(u,o({ref:t},l))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,c=new Array(r);c[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,c[1]=o;for(var l=2;l<r;l++)c[l]=n[l];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},66:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return d}));var i=n(3),a=n(7),r=(n(0),n(100)),c={title:"Getting Started"},o={unversionedId:"libs-getting-started",id:"libs-getting-started",isDocsHomePage:!1,title:"Getting Started",description:"Environment",source:"@site/docs/libs-getting-started.md",slug:"/libs-getting-started",permalink:"/docs/libs-getting-started",editUrl:"https://github.com/ceramicstudio/js-idx/edit/master/website/docs/libs-getting-started.md",version:"current",sidebar:"docs",previous:{title:"What is Ceramic?",permalink:"/docs/concepts/ceramic"},next:{title:"Interfaces and types",permalink:"/docs/libs-types"}},s=[{value:"Environment",id:"environment",children:[]},{value:"Installation",id:"installation",children:[{value:"IDX client library",id:"idx-client-library",children:[]},{value:"IDX tools library",id:"idx-tools-library",children:[]}]},{value:"Definitions and Schemas",id:"definitions-and-schemas",children:[]},{value:"Example usage",id:"example-usage",children:[]}],l={rightToc:s};function d(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(i.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"environment"},"Environment"),Object(r.b)("p",null,"IDX needs to access the Ceramic network using an implementation of the Ceramic API as exported by the ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://docs.ceramic.network/modules/_ceramicnetwork_common.html"}),Object(r.b)("inlineCode",{parentName:"a"},"@ceramicnetwork/common")," library"),"."),Object(r.b)("p",null,"Packages implementing this interface include ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://docs.ceramic.network/modules/_ceramicnetwork_core.html"}),Object(r.b)("inlineCode",{parentName:"a"},"@ceramicnetwork/core"))," and ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://docs.ceramic.network/modules/_ceramicnetwork_http_client.html"}),Object(r.b)("inlineCode",{parentName:"a"},"@ceramicnetwork/http-client")),"."),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(i.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(i.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(i.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(i.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"Alpha release")),Object(r.b)("div",Object(i.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"IDX is currently in alpha and may be unstable."))),Object(r.b)("h2",{id:"installation"},"Installation"),Object(r.b)("p",null,"There are two main libraries to use when building apps for IDX"),Object(r.b)("h3",{id:"idx-client-library"},"IDX client library"),Object(r.b)("p",null,"This library is used by apps to interact with Ceramic and IDX documents"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-sh"}),"npm install @ceramicstudio/idx\n")),Object(r.b)("h3",{id:"idx-tools-library"},"IDX tools library"),Object(r.b)("p",null,"This library contains tools for developers to help create the data models used by apps"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-sh"}),"npm install --dev @ceramicstudio/idx-tools\n")),Object(r.b)("h2",{id:"definitions-and-schemas"},"Definitions and Schemas"),Object(r.b)("p",null,"All ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"/docs/terminology#document"}),"Documents")," attached to the ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"/docs/terminology#identity-index--idx"}),"Identity Index")," need to use a ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"/docs/terminology#definition"}),"Definition"),"."),Object(r.b)("p",null,"Once a public Ceramic network is running, the IDX library will provide a set of Definitions that can be used directly, but in the meantime these needs to be defined by developers using IDX."),Object(r.b)("p",null,"To create a Defininition, a specific ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"/docs/terminology#schema"}),"Schema")," needs to be used, and therefore must be present on the Ceramic node used by the IDX instance.\nThe ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://github.com/ceramicstudio/js-idx-tools"}),Object(r.b)("inlineCode",{parentName:"a"},"idx-tools")," library")," can be used to easily publish schemas to the Ceramic node:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-ts"}),"import { publishIDXConfig } from '@ceramicstudio/idx-tools'\n\n// First we need to make sure the IDX config (definitions and schemas) are published on the Ceramic node\n// Here `ceramic` implements the CeramicApi interface\nconst { definitions } = await publishIDXConfig(ceramic)\n\nconst appDefinitions = {\n  profile: definitions.basicProfile,\n}\n\n// Export the created `appDefinitions` so they can be used at runtime\n")),Object(r.b)("h2",{id:"example-usage"},"Example usage"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-ts"}),"import { IDX } from '@ceramicstudio/idx'\n\n// Import definitions created during development or build time\nimport { definitions } from './app-definitions'\n\n// A first user (Alice) can set her profile on her IDX Document using the definition alias used by the app\nconst aliceIndex = new IDX({ ceramic, definitions })\nawait aliceIndex.set('profile', { name: 'Alice' })\n\n// Other users (such as Bob) can read from known Indexes using the same definion alias and Alice's DID\nconst bobClient = new IDX({ ceramic, definitions })\nconst aliceProfile = await bobClient.get('profile', aliceIndex.id)\n")))}d.isMDXComponent=!0}}]);