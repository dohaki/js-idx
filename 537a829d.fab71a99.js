(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{84:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return d})),n.d(t,"default",(function(){return p}));var i=n(3),r=n(7),a=(n(0),n(99)),o={title:"What is a Definition?",slug:"/concepts/definition"},c={unversionedId:"core-concepts-definitions",id:"core-concepts-definitions",isDocsHomePage:!1,title:"What is a Definition?",description:"In IDX, the definition is a document created by a developer which includes metadata about a data set found in an index. It is used to describe the data they wish to store with the user in a structured way. The DocID of the definition is used as a key in the user's index, which points to the DocID of a corresponding reference. Definitions allow user-centric data (references) to be discoverable and queryable according based on any of the metadata found below. Developers only need to create a definition once, and it can then be used as a key in any number of indexes.",source:"@site/docs/core-concepts-definitions.md",slug:"/concepts/definition",permalink:"/docs/concepts/definition",editUrl:"https://github.com/ceramicstudio/js-idx/edit/master/website/docs/core-concepts-definitions.md",version:"current",sidebar:"docs",previous:{title:"What is an Index?",permalink:"/docs/concepts/index"},next:{title:"What is a Reference?",permalink:"/docs/concepts/reference"}},d=[{value:"What&#39;s included in a definition?",id:"whats-included-in-a-definition",children:[]}],s={rightToc:d};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(i.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"In IDX, the ",Object(a.b)("strong",{parentName:"p"},"definition")," is a document created by a developer which includes metadata about a data set found in an ",Object(a.b)("a",Object(i.a)({parentName:"p"},{href:"/docs/concepts/index"}),"index"),". It is used to describe the data they wish to store with the user in a structured way. The ",Object(a.b)("a",Object(i.a)({parentName:"p"},{href:"/docs/concepts/ceramic#docid"}),"DocID")," of the definition is used as a key in the user's index, which points to the DocID of a corresponding ",Object(a.b)("a",Object(i.a)({parentName:"p"},{href:"/docs/concepts/reference"}),"reference"),". Definitions allow user-centric data (references) to be discoverable and queryable according based on any of the metadata found below. Developers only need to create a definition once, and it can then be used as a key in any number of indexes."),Object(a.b)("p",null,"In IDX, definitions are stored on the ",Object(a.b)("a",Object(i.a)({parentName:"p"},{href:"/docs/concepts/ceramic"}),"Ceramic Network"),"."),Object(a.b)("h2",{id:"whats-included-in-a-definition"},"What's included in a definition?"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("inlineCode",{parentName:"p"},"schema")," (required): the DocID of the ",Object(a.b)("a",Object(i.a)({parentName:"p"},{href:"/docs/concepts/schema"}),"schema")," that will be used to validate the reference contents")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("inlineCode",{parentName:"p"},"name")," (required): a name of the definition, helping unique identification and discovery")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("inlineCode",{parentName:"p"},"description")," (optional): a short description of the definition, to help with discovery")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("inlineCode",{parentName:"p"},"url")," (optional): a URL of the specification for the definition or the associated project")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("inlineCode",{parentName:"p"},"config")," (optional): any additional contents that may be needed by applications to support additional logic when interacting with the reference"))))}p.isMDXComponent=!0},99:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return f}));var i=n(0),r=n.n(i);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),p=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=p(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),l=p(n),b=i,f=l["".concat(o,".").concat(b)]||l[b]||u[b]||a;return n?r.a.createElement(f,c(c({ref:t},s),{},{components:n})):r.a.createElement(f,c({ref:t},s))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=b;var c={};for(var d in t)hasOwnProperty.call(t,d)&&(c[d]=t[d]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var s=2;s<a;s++)o[s]=n[s];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);